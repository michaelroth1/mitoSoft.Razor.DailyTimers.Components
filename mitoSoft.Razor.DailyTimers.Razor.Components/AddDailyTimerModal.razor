@*http://blog.ppedv.de/post/Boostrap-Modal-Dialog-fur-Blazor*@

@inject IJSRuntime JsRuntime

@if (_show)
{
    <div class="modal fade show" id="myModal" style="display: block;">
        <div class="modal-dialog modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h4>@($"{Properties.Resources.Name}:")</h4>
                    <button type="button" class="close" data-dismiss="modal" @onclick="@CloseClicked">&times;</button>
                </div>
                <div class="modal-body">
                    <p>
                        <input type="text" class="form-control" placeholder="@Properties.Resources.Name" @bind="@_channelName">
                    </p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="@SaveClicked">OK</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="@CloseClicked">@Properties.Resources.Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private bool _show;

    public string _channelName;

    [Parameter]
    public IList<IDailyTimer> Channels { get; set; }

    [Parameter]
    public Action<MouseEventArgs> OnClosed { get; set; }

    [Parameter]
    public Action<MouseEventArgs, string> OnChannelAdded { get; set; }

    public void Show(IList<IDailyTimer> channels)
    {
        this.Channels = channels;
        this._channelName = string.Empty;
        _show = true;
        InvokeAsync(StateHasChanged);
    }

    public void Close()
    {
        _show = false;
        InvokeAsync(StateHasChanged);
    }

    private void CloseClicked(MouseEventArgs e)
    {
        this.Close();
        this.OnClosed?.Invoke(e);
    }

    private async void SaveClicked(MouseEventArgs e)
    {
        if (string.IsNullOrEmpty(this._channelName))
        {
            await JsRuntime.InvokeVoidAsync("alert", $"Bitte einen Namen auswählen.");
        }
        else if (this.Channels.Any(c => c.Name == this._channelName))
        {
            await JsRuntime.InvokeVoidAsync("alert", $"Der Name '{this._channelName}' existiert bereits.");
        }
        else
        {
            this.Close();
            this.OnChannelAdded?.Invoke(e, this._channelName);
        }
    }
}