@page "/timers"

@using mitoSoft.DailyTimers.Core.Contracts
@using mitoSoft.DailyTimers.Core.Extensions
@using mitoSoft.Razor.Components
@using mitoSoft.Razor.DailyTimers.Components
@using mitoSoft.DailyTimers.Core
@using Models

@inject IJSRuntime JsRuntime

<h1>Timers</h1>

<p>
    <button class="btn btn-primary" @onclick="@OnTimerAdded">
        <span class="oi oi-plus" aria-hidden="true"></span>
    </button>
</p>


@foreach (var timer in this.Timers.SortByName())
{
    <p>
        @if (this._selectedTimer == timer)
        {
            <DailyTimerView @ref="_view" ShowEditorOnClick="true" OnTimerRemoved="@OnTimerRemoved" OnTimerUpdated="@OnTimerUpdated" Timer="@timer"></DailyTimerView>
        }
        else
        {
            <DailyTimerView ShowEditorOnClick="true" OnTimerRemoved="@OnTimerRemoved" OnTimerUpdated="@OnTimerUpdated" Timer="@timer"></DailyTimerView>
        }
    </p>
}

<InputBox @ref="_inputBox"></InputBox>
<MessageBox @ref="_messageBox"></MessageBox>

@code {
    private InputBox _inputBox;
    private MessageBox _messageBox;
    private IDailyTimer? _selectedTimer;
    private DailyTimerView _view;

    private IList<IDailyTimer> Timers { get; set; }

    protected override void OnInitialized()
    {
        this.Timers = new List<IDailyTimer>();

        for (int i = 0; i < 3; i++)
        {
            var timer = new DailyTimer();
            timer.Initialize();
            timer.Name = $"Test{i}";
            Timers.Add(timer);
        }
    }

    private void OnTimerUpdated(MouseEventArgs e, IDailyTimer timer)
    {
        //do something when a timer gets updated
        InvokeAsync(StateHasChanged);
    }

    private void OnTimerRemoved(MouseEventArgs e, IDailyTimer timer)
    {
        this.Timers.Remove(timer);
        InvokeAsync(StateHasChanged);
    }

    private async void OnTimerAdded(MouseEventArgs e)
    {
        var result = await _inputBox.ShowDialog("Timers", "Add DailyTimer", "");

        if (result != Razor.Components.Enums.DialogResult.OK)
        {
            return;
        }
        else if (string.IsNullOrEmpty(_inputBox.Result))
        {
            await _messageBox.ShowDialog("Timers", $"Choose a name.", Razor.Components.Enums.DialogButtons.OK);
        }
        else if (this.Timers.Any(c => c.Name == _inputBox.Result))
        {
            await _messageBox.ShowDialog("Timers", $"The name '{_inputBox.Result}' is already choosen.", Razor.Components.Enums.DialogButtons.OK);
        }
        else
        {
            var timer = new DailyTimer();
            timer.Initialize();
            timer.Name = _inputBox.Result;
            Timers.Add(timer);
            this._selectedTimer = timer;
            await InvokeAsync(StateHasChanged);
            if (this._view != null)
            {
                await this._view.ShowEditor();
            }
            this._selectedTimer = null;
        }
    }
}