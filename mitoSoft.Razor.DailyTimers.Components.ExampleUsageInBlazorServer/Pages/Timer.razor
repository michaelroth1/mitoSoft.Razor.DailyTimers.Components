@page "/timers"

@using mitoSoft.DailyTimers.Core.Contracts
@using mitoSoft.DailyTimers.Core.Extensions
@using mitoSoft.Razor.Components
@using mitoSoft.Razor.DailyTimers.Components

@inject IJSRuntime JsRuntime

<h1>TimeSwitches</h1>

<p>
    <button class="btn btn-primary" @onclick="@ShowInputBox">Add</button>
</p>


@foreach (var timer in this.Timers.SortByName())
{
    <p>
        <DailyTimerView OnTimerRemoved="@OnTimerRemoved" OnTimerUpdated="@OnTimerUpdated" Timer="@timer"></DailyTimerView>
    </p>
}

<InputBox @ref="_input" OnOkClicked="@OnTimerAdded"></InputBox>

@code {
    private InputBox _input;

    private IList<IDailyTimer> Timers { get; set; }

    protected override void OnInitialized()
    {
        this.Timers = new List<IDailyTimer>();

        for (int i = 0; i < 3; i++)
        {
            var timer = new DailyTimer();
            timer.Initialize();
            timer.Name = $"Test{i}";
            Timers.Add(timer);
        }
    }

    private void ShowInputBox()
    {
        _input.Show("Add DailyTimer", "");
    }

    private void OnTimerUpdated(MouseEventArgs e, IDailyTimer timer)
    {
        //do something when a timer gets updated
        InvokeAsync(StateHasChanged);
    }

    private void OnTimerRemoved(MouseEventArgs e, IDailyTimer timer)
    {
        this.Timers.Remove(timer);
        InvokeAsync(StateHasChanged);
    }

    private async void OnTimerAdded(MouseEventArgs e, string name)
    {
        if (string.IsNullOrEmpty(name))
        {
            await JsRuntime.InvokeVoidAsync("alert", $"Choose a name.");
        }
        else if (this.Timers.Any(c => c.Name == name))
        {
            await JsRuntime.InvokeVoidAsync("alert", $"The name '{name}' is already choosen.");
        }
        else
        {
            var timer = new DailyTimer();
            timer.Initialize();
            timer.Name = name;
            Timers.Add(timer);
            await InvokeAsync(StateHasChanged);
        }
    }
}