@using mitoSoft.Razor.DailyTimers.Components.Converters

<div class="mitosoft-component">
    <div class="mitosoft-component-timer">
        <div class="mitosoft-timer-view rounded">
            <div class="row">
                <div class="col">
                    <div class="container mt-2 mb-2">
                        <lable class="mitosoft-text">
                            @($"{this.Timer.Name} ({this.Timer.Active.ToText()})")
                            <br />
                            @($"{this.GetChannelText()}")
                        </lable>
                    </div>
                </div>

                <div class="col-auto">
                    <div class="btn-group" role="group" aria-label="Basic example">
                        <button type="button" class="btn btn-primary mitosoft-btn mitosoft-btn-primary" @onclick="@(e => SelectClicked(e))">
                            <span class="oi oi-pencil" aria-hidden="true"></span>
                        </button>
                        <button type="button" class="btn btn-secondary mitosoft-btn mitosoft-btn-secondary" @onclick="@(e => RemoveClicked(e))">
                            <span class="oi oi-x" aria-hidden="true"></span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<EditDailyTimerModal @ref="_editTimer"></EditDailyTimerModal>

@code {

    private EditDailyTimerModal _editTimer;

    [Parameter]
    public Action<MouseEventArgs, IDailyTimer> OnTimerSelected { get; set; }

    [Parameter]
    public Action<MouseEventArgs, IDailyTimer> OnTimerRemoved { get; set; }

    [Parameter]
    public Action<MouseEventArgs, IDailyTimer> OnTimerUpdated { get; set; }

    [Parameter]
    public IDailyTimer Timer { get; set; }

    [Parameter]
    public bool ShowEditorOnClick { get; set; }

    [Parameter]
    public bool ShowRemoveButton { get; set; } = true;

    public async void SelectClicked(MouseEventArgs e)
    {
        OnTimerSelected?.Invoke(e, this.Timer);

        if (this.ShowEditorOnClick)
        {
            var result = await _editTimer.ShowDialog(this.Timer);

            if (result == Razor.Components.Enums.DialogResult.OK)
            {
                OnTimerUpdated?.Invoke(e, _editTimer.Timer);
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    public void RemoveClicked(MouseEventArgs e)
    {
        OnTimerRemoved?.Invoke(e, this.Timer);
    }

    private string GetChannelText()
    {
        string desc = "";
        if (!string.IsNullOrEmpty(this.Timer.Description))
        {
            desc = this.Timer.Description + ": ";
        }
        return desc + this.Timer.GetAbbreviationText() + " - " + this.Timer.SwitchTime;
    }
}