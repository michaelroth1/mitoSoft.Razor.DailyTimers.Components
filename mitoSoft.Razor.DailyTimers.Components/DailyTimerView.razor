@using mitoSoft.Razor.DailyTimers.Components.Converters

<div class="input-group mb-3">
    <button class="btn btn-primary btn-block" @onclick="@(e => SelectClicked(e))">
        @($"{this.Timer.Name} ({this.Timer.Active.ToText()})")
        <br />
        @GetChannelText()
    </button>
    @if (this.ShowRemoveButton)
    {
        <button class="btn btn-secondary overlay" type="button" @onclick="@(e => RemoveClicked(e))">&times;</button>
    }
</div>

<EditDailyTimerModal @ref="_editTimer"></EditDailyTimerModal>

@code {

    private EditDailyTimerModal _editTimer;

    [Parameter]
    public Action<MouseEventArgs, IDailyTimer> OnTimerSelected { get; set; }

    [Parameter]
    public Action<MouseEventArgs, IDailyTimer> OnTimerRemoved { get; set; }

    [Parameter]
    public Action<MouseEventArgs, IDailyTimer> OnTimerUpdated { get; set; }

    [Parameter]
    public IDailyTimer Timer { get; set; }

    [Parameter]
    public bool ShowEditorOnClick { get; set; }

    [Parameter]
    public bool ShowRemoveButton { get; set; } = true;

    public async void SelectClicked(MouseEventArgs e)
    {
        OnTimerSelected?.Invoke(e, this.Timer);

        if (this.ShowEditorOnClick)
        {
            var result = await _editTimer.ShowDialog(this.Timer);

            if (result == Razor.Components.Enums.DialogResult.OK)
            {
                OnTimerUpdated?.Invoke(e, _editTimer.Timer);
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    public void RemoveClicked(MouseEventArgs e)
    {
        OnTimerRemoved?.Invoke(e, this.Timer);
    }

    private string GetChannelText()
    {
        string desc = "";
        if (!string.IsNullOrEmpty(this.Timer.Description))
        {
            desc = this.Timer.Description + ": ";
        }
        return desc + this.Timer.GetAbbreviationText() + " - " + this.Timer.SwitchTime;
    }
}